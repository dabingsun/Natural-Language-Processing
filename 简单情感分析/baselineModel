from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer,TfidfVectorizer
'''
要分析清洗后的数据，就要把它们转换成特征。根据用途来说，文本特征可以使用很多种算法来转换。
比如词袋模型（Bag-Of-Words），词频统计的方法
TF-IDF(term frequency–inverse document frequency),术语频率-逆文档频率
word Embeddings之类的方法。词嵌入（one-hot encoding）
在本文中，我使用了Bag-Of-Words和TF-IDF两个方法
'''
bowVectory = CountVectorizer(max_df=0.30, max_features=8200, stop_words='english')

combi = trainData.append(testData,ignore_index=True,sort=False)
bow = bowVectory.fit_transform(combi['review'])
bowtest = bowVectory.fit_transform(testData['review'])

#tf-idf表示
#tf_idf_transformer = TfidfTransformer()
#tf_idf = tf_idf_transformer.fit_transform(bowVectory.fit_transform(combi))

#print(testData.describe())

#使用LR来构建模型
train_bow = bow[:6325,:]
test_bow = bowtest[:2712,]

y = trainData['label'][0:6325]
#print(y)

#分为测试集和验证集
xtrain_bow, xvalid_bow, ytrain, yvalid = train_test_split(train_bow, y, random_state=42, test_size=0.3)

logisticRegression = LogisticRegression()

logisticRegression.fit(xtrain_bow,ytrain)

prediction  = logisticRegression.predict_proba(xvalid_bow)

prediction_int = prediction[:,1] >= 0.5
prediction_int = prediction_int.astype(np.int)

print("回归f",f1_score(yvalid, prediction_int)) # calculating f1 score
#

#使用贝叶斯NB
from sklearn.model_selection import  train_test_split,KFold
#from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB,BernoulliNB,MultinomialNB
from sklearn.metrics import roc_auc_score,auc,roc_curve
#from sklearn.svm import SVC
#import xgboost as xgb

X_train_part,X_test_part,y_train_part,y_test_part = train_test_split(train_bow,trainData['label'],test_size = 0.2)

clf = MultinomialNB()
clf.fit(X_train_part,y_train_part)

y_pred = clf.predict_proba(X_train_part)
fpr, tpr, thresholds = roc_curve(y_train_part, y_pred[:,1])
print(auc(fpr, tpr))  ###0.9992496306904572

y_pred = clf.predict_proba(X_test_part)
fpr, tpr, thresholds = roc_curve(y_test_part, y_pred[:,1])
print(auc(fpr, tpr)) ###0.8613719824212871

clf = MultinomialNB() 
clf.fit(train_bow,trainData['label']) 
y_pred_text = clf.predict_proba(test_bow) 
test_pred = logisticRegression.predict_proba(test_bow)
print("这里P:",test_pred)
